{
  "name": "protobuf.js",
  "version": "1.1.2",
  "description": "a pure javascript protocol buffer encoding implementation, written specifically for riak",
  "main": "index.js",
  "dependencies": {
    "long": "~1.1.2"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nlf/protobuf.js"
  },
  "keywords": [
    "protobuf",
    "protocol",
    "buffer",
    "encode"
  ],
  "author": {
    "name": "Nathan LaFreniere",
    "email": "quitlahok@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.17.0",
    "chai": "~1.8.1",
    "precommit-hook": "~0.3.9"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha test"
  },
  "readme": "Protobuf.js\n-----------\n\nThis is a pure javascript driver for the protocol buffer encoding protocol. It supports most of the types defined by protocol buffers, including 64 bit integers which are returned as [long](https://github.com/dcodeIO/long.js) objects.\n\nWhat it does:\n=============\n\n* reads output from [proto2json](https://github.com/Sannis/node-proto2json) as a schema\n* encodes objects to buffers\n* decodes buffers to objects\n\nWhat it does not do:\n====================\n\n* make your breakfast\n\n\nUsage\n=====\n\n```javascript\nvar protobuf = require('protobuf.js');\nvar proto2json = require('node-proto2json');\nproto2json.parse(fs.readFileSync('./riak_kv.proto', 'utf8'), function (err, result) {\n    var translator = new protobuf(result);\n\n    //msg will *only* contain the protobuf encoded message, *NOT* the full riak packet\n    var msg = translator.encode('RpbGetReq', { bucket: 'test', key: 'test' });\n\n    //again, this will *only* decode the protobuf message. you have to remove the riak header yourself\n    var decoded = translator.decode('RpbGetResp', responsePacket);\n});\n\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nlf/protobuf.js/issues"
  },
  "_id": "protobuf.js@1.1.2",
  "_from": "protobuf.js@1.x.x"
}
